use chrono::{DateTime, Utc};
use model::channel::Channel;
use model::guild::{
    DefaultMessageNotifications, Emoji, ExplicitContentFilterLevel, Guild, MFALevel, Member,
    NsfwLevel, PremiumTier, Role, VerificationLevel, VoiceState, WelcomeScreen,
};
use model::stage::StageInstance;
use model::sticker::Sticker;
use model::user::PresenceUpdate;
use model::{ImageHash, Snowflake};

#[derive(Clone, Debug)]
pub struct CachedGuild {
    pub name: Box<str>,
    pub icon: Option<ImageHash>,
    pub splash: Option<ImageHash>,
    pub discovery_splash: Option<ImageHash>,
    pub owner_id: Snowflake,
    pub afk_channel_id: Option<Snowflake>,
    pub afk_timeout: u16,
    pub widget_enabled: bool,
    pub widget_channel_id: Option<Snowflake>,
    pub verification_level: VerificationLevel,
    pub default_message_notifications: DefaultMessageNotifications,
    pub explicit_content_filter: ExplicitContentFilterLevel,
    pub features: Vec<Box<str>>,
    pub mfa_level: MFALevel,
    pub application_id: Option<Snowflake>,
    pub system_channel_id: Option<Snowflake>,
    pub system_channels_flags: u32,
    pub rules_channel_id: Option<Snowflake>,
    pub joined_at: DateTime<Utc>,
    pub large: bool,
    pub unavailable: Option<bool>,
    pub member_count: u32,
    pub max_presences: Option<u32>,
    pub max_members: u32,
    pub vanity_url_code: Option<Box<str>>,
    pub description: Option<Box<str>>,
    pub banner: Option<ImageHash>,
    pub premium_tier: PremiumTier,
    pub premium_subscription_count: u32,
    pub preferred_locale: Box<str>,
    pub public_updates_channel_id: Option<Snowflake>,
    pub max_video_channel_users: u16,
    pub approximate_member_count: u32,
    pub approximate_presence_count: u32,
    pub welcome_screen: Option<WelcomeScreen>,
    pub nsfw_level: NsfwLevel,
    pub premium_progress_bar_enabled: bool,
}

impl CachedGuild {
    pub fn into_guild_simple(
        self,
        id: Snowflake,
        roles: Vec<Role>,
        emojis: Vec<Emoji>,
        members: Vec<Member>,
        channels: Vec<Channel>,
        threads: Vec<Channel>,
    ) -> Guild {
        self.into_guild(
            id,
            roles,
            emojis,
            vec![],
            members,
            channels,
            threads,
            vec![],
            vec![],
            vec![],
        )
    }

    pub fn into_guild(
        self,
        id: Snowflake,
        roles: Vec<Role>,
        emojis: Vec<Emoji>,
        voice_states: Vec<VoiceState>,
        members: Vec<Member>,
        channels: Vec<Channel>,
        threads: Vec<Channel>,
        presences: Vec<PresenceUpdate>,
        stages: Vec<StageInstance>,
        stickers: Vec<Sticker>,
    ) -> Guild {
        Guild {
            id,
            name: self.name,
            icon: self.icon,
            splash: self.splash,
            discovery_splash: self.discovery_splash,
            owner_id: self.owner_id,
            afk_channel_id: self.afk_channel_id,
            afk_timeout: self.afk_timeout,
            widget_enabled: self.widget_enabled,
            widget_channel_id: self.widget_channel_id,
            verification_level: self.verification_level,
            default_message_notifications: self.default_message_notifications,
            explicit_content_filter: self.explicit_content_filter,
            roles,
            emojis,
            features: self.features,
            mfa_level: self.mfa_level,
            application_id: self.application_id,
            system_channel_id: self.system_channel_id,
            system_channels_flags: self.system_channels_flags,
            rules_channel_id: self.rules_channel_id,
            joined_at: self.joined_at,
            large: self.large,
            unavailable: self.unavailable,
            member_count: self.member_count,
            voice_states,
            members,
            channels,
            threads,
            presences,
            max_presences: self.max_presences,
            max_members: self.max_members,
            vanity_url_code: self.vanity_url_code,
            description: self.description,
            banner: self.banner,
            premium_tier: self.premium_tier,
            premium_subscription_count: self.premium_subscription_count,
            preferred_locale: self.preferred_locale,
            public_updates_channel_id: self.public_updates_channel_id,
            max_video_channel_users: self.max_video_channel_users,
            approximate_member_count: self.approximate_member_count,
            approximate_presence_count: self.approximate_presence_count,
            welcome_screen: self.welcome_screen,
            nsfw_level: self.nsfw_level,
            stage_instances: stages,
            stickers,
            premium_progress_bar_enabled: self.premium_progress_bar_enabled,
        }
    }
}

impl From<Guild> for CachedGuild {
    fn from(other: Guild) -> Self {
        Self {
            name: other.name,
            icon: other.icon,
            splash: other.splash,
            discovery_splash: other.discovery_splash,
            owner_id: other.owner_id,
            afk_channel_id: other.afk_channel_id,
            afk_timeout: other.afk_timeout,
            widget_enabled: other.widget_enabled,
            widget_channel_id: other.widget_channel_id,
            verification_level: other.verification_level,
            default_message_notifications: other.default_message_notifications,
            explicit_content_filter: other.explicit_content_filter,
            features: other.features,
            mfa_level: other.mfa_level,
            application_id: other.application_id,
            system_channel_id: other.system_channel_id,
            system_channels_flags: other.system_channels_flags,
            rules_channel_id: other.rules_channel_id,
            joined_at: other.joined_at,
            large: other.large,
            unavailable: other.unavailable,
            member_count: other.member_count,
            max_presences: other.max_presences,
            max_members: other.max_members,
            vanity_url_code: other.vanity_url_code,
            description: other.description,
            banner: other.banner,
            premium_tier: other.premium_tier,
            premium_subscription_count: other.premium_subscription_count,
            preferred_locale: other.preferred_locale,
            public_updates_channel_id: other.public_updates_channel_id,
            max_video_channel_users: other.max_video_channel_users,
            approximate_member_count: other.approximate_member_count,
            approximate_presence_count: other.approximate_presence_count,
            welcome_screen: other.welcome_screen,
            nsfw_level: other.nsfw_level,
            premium_progress_bar_enabled: other.premium_progress_bar_enabled,
        }
    }
}
